// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var jsonParser = JsonParser.FromJson(jsonString);

namespace TraviAnt
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    [System.Reflection.ObfuscationAttribute(Feature = "renaming", ApplyToMembers = true)]
    public partial class JsonParser
    {
        [JsonProperty("response")]
        public Response Response { get; set; }
    }

    [System.Reflection.ObfuscationAttribute(Feature = "renaming", ApplyToMembers = true)]
    public partial class Response
    {
        [JsonProperty("error")]
        public bool Error { get; set; }

        [JsonProperty("errorMsg")]
        public object ErrorMsg { get; set; }

        [JsonProperty("data")]
        public Data Data { get; set; }
    }

    [System.Reflection.ObfuscationAttribute(Feature = "renaming", ApplyToMembers = true)]
    public partial class Data
    {
        [JsonProperty("html")]
        public string Html { get; set; }

        [JsonProperty("list")]
        public List List { get; set; }

        [JsonProperty("sort")]
        public string Sort { get; set; }

        [JsonProperty("direction")]
        public string Direction { get; set; }

        [JsonProperty("distributed")]
        public List<long> Distributed { get; set; }

        [JsonProperty("resources")]
        public List<long> Resources { get; set; }

        [JsonProperty("functionToCall")]
        public string FunctionToCall { get; set; }

        [JsonProperty("options", NullValueHandling = NullValueHandling.Include)]
        public Options Options { get; set; } = new Options { };
    }

    [System.Reflection.ObfuscationAttribute(Feature = "renaming", ApplyToMembers = true)]
    public partial class Options
    {
        [JsonProperty("dialogOptions", NullValueHandling = NullValueHandling.Include)]
        public DialogOptions DialogOptions { get; set; }

        [JsonProperty("html", NullValueHandling = NullValueHandling.Include)]
        public string Html { get; set; }
    }

    [System.Reflection.ObfuscationAttribute(Feature = "renaming", ApplyToMembers = true)]
    public partial class DialogOptions
    {
        [JsonProperty("infoIcon")]
        public Uri InfoIcon { get; set; }

        [JsonProperty("saveOnUnload")]
        public bool SaveOnUnload { get; set; }

        [JsonProperty("draggable")]
        public bool Draggable { get; set; }

        [JsonProperty("buttonOk")]
        public bool ButtonOk { get; set; }

        [JsonProperty("context")]
        public string Context { get; set; }
    }

    [System.Reflection.ObfuscationAttribute(Feature = "renaming", ApplyToMembers = true)]
    public partial class List
    {
        [JsonProperty("troops")]
        public Dictionary<string, long> Troops { get; set; }

        [JsonProperty("directions")]
        public Directions Directions { get; set; }

        [JsonProperty("slots")]
        public Dictionary<string, Slot> Slots { get; set; }
    }

    [System.Reflection.ObfuscationAttribute(Feature = "renaming", ApplyToMembers = true)]
    public partial class Directions
    {
        [JsonProperty("village")]
        public string Village { get; set; }

        [JsonProperty("ew")]
        public string Ew { get; set; }

        [JsonProperty("distance")]
        public string Distance { get; set; }

        [JsonProperty("troops")]
        public string Troops { get; set; }

        [JsonProperty("lastRaid")]
        public string LastRaid { get; set; }
    }

    [System.Reflection.ObfuscationAttribute(Feature = "renaming", ApplyToMembers = true)]
    public partial class Slot
    {
        [JsonProperty("troops")]
        public Dictionary<string, long> Troops { get; set; }
    }

    public partial class JsonParser
    {
        public static JsonParser FromJson(string json) => JsonConvert.DeserializeObject<JsonParser>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this JsonParser self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
            MissingMemberHandling = MissingMemberHandling.Ignore,
        };
    }
}
